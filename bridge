import numpy as np
import matplotlib.pyplot as plt

# Generate bridge lengths (0.1m to 2.5m in 0.1m steps)
lengths = np.arange(0.1, 2.5, 0.1)

# Simulate weight capacities for each length (just for illustration)
weight_capacities = 50 + 30 * lengths  # Replace this with actual weight capacities if available.

# Define different combined scoring systems

def combined_linear_scoring(length, weight):
    """Score = Weight + (linear multiplier * length)"""
    multiplier = 3
    return weight + (multiplier * length)

def combined_exponential_scoring(length, weight):
    """Score = Weight + (exponential multiplier * length)"""
    multiplier = 5
    return weight + (multiplier * np.exp(length))

def combined_squared_length_scoring(length, weight):
    """Score = Weight + (multiplier * length^2)"""
    multiplier = 2
    return weight + (multiplier * length ** 2)

def combined_weight_power_scoring(length, weight):
    """Score = weight^exponent + (multiplier * length)"""
    exponent = 1.5
    multiplier = 4
    return (weight ** exponent) + (multiplier * length)

def combined_cubic_length_scoring(length, weight):
    """Score = weight + (multiplier * length^3)"""
    multiplier = 1
    return weight + (multiplier * length ** 3)

def combined_logarithmic_scoring(length, weight):
    """Score = weight + (logarithmic multiplier * length)"""
    multiplier = 10
    return weight + (multiplier * np.log(length + 1))  # Adding 1 to avoid log(0)

def combined_linear_weight_exponential_length_scoring(length, weight):
    """Score = weight + (linear weight + exponential length)"""
    weight_multiplier = 1.2
    length_multiplier = 3
    return (weight * weight_multiplier) + (length_multiplier * np.exp(length))

# Calculate scores for each length and corresponding weight capacity
scores_linear = [combined_linear_scoring(length, weight) for length, weight in zip(lengths, weight_capacities)]
scores_exponential = [combined_exponential_scoring(length, weight) for length, weight in zip(lengths, weight_capacities)]
scores_squared = [combined_squared_length_scoring(length, weight) for length, weight in zip(lengths, weight_capacities)]
scores_weight_power = [combined_weight_power_scoring(length, weight) for length, weight in zip(lengths, weight_capacities)]
scores_cubic = [combined_cubic_length_scoring(length, weight) for length, weight in zip(lengths, weight_capacities)]
scores_logarithmic = [combined_logarithmic_scoring(length, weight) for length, weight in zip(lengths, weight_capacities)]
scores_linear_weight_exp_length = [combined_linear_weight_exponential_length_scoring(length, weight) for length, weight in zip(lengths, weight_capacities)]

# Plot the results
plt.figure(figsize=(12, 8))
plt.plot(lengths, scores_linear, label='Linear Weight + Length', linewidth=2)
plt.plot(lengths, scores_exponential, label='Exponential Length Influence', linestyle='--', linewidth=2)
plt.plot(lengths, scores_squared, label='Squared Length Influence', linestyle='-.', linewidth=2)
#plt.plot(lengths, scores_weight_power, label='Weight Power + Length', linestyle=':', linewidth=2)
plt.plot(lengths, scores_cubic, label='Cubic Length Influence', linestyle='-', linewidth=2)
plt.plot(lengths, scores_logarithmic, label='Logarithmic Length Influence', linestyle='-', linewidth=2)
plt.plot(lengths, scores_linear_weight_exp_length, label='Linear Weight + Exp Length', linestyle='-', linewidth=2)

# Customize the plot
plt.title('Comparison of Combined Scoring Systems (Weight + Length)')
plt.xlabel('Bridge Length (m)')
plt.ylabel('Score')
plt.legend()
plt.grid(True)
plt.show()
