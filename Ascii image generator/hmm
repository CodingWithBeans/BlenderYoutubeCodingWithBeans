import bpy

# CONFIGURATION
image_path = r"C:\Users\matty\Pictures\CoolShit\Screenshot 2023-07-19 234214.png"  # Change this to your image path
cube_size = 0.1  # Size of each cube
resize_width = 50  # Number of cubes along the width (adjust for detail)

# Delete all existing objects
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete()

# Load the image
bpy.data.images.load(image_path, check_existing=True)
image = bpy.data.images[image_path.split("\\")[-1]]

# Calculate resize dimensions
aspect_ratio = image.size[1] / image.size[0]
new_height = int(resize_width * aspect_ratio)

# Get pixel data
pixels = list(image.pixels)
pixel_data = [(pixels[i], pixels[i+1], pixels[i+2]) for i in range(0, len(pixels), 4)]

# Create a single material that uses the object colour
mat = bpy.data.materials.new(name="CubeMaterial")
mat.use_nodes = True
bsdf = mat.node_tree.nodes["Principled BSDF"]
bsdf.inputs["Base Color"].default_value = (1, 1, 1, 1)  # Base colour is white
material_output = mat.node_tree.nodes["Material Output"]

# Add an "Object Info" node to access each cube's object colour
object_info = mat.node_tree.nodes.new("ShaderNodeObjectInfo")
mat.node_tree.links.new(object_info.outputs["Color"], bsdf.inputs["Base Color"])

# Create a single cube and reuse it with linked duplicates
bpy.ops.mesh.primitive_cube_add(size=cube_size, location=(0, 0, 0))
base_cube = bpy.context.object
bpy.ops.object.modifier_add(type='BEVEL')
base_cube.data.materials.append(mat)

# Create and place cubes with unique object colours
for x in range(resize_width):
    for y in range(new_height):
        pixel_x = int((x / resize_width) * image.size[0])
        pixel_y = int((y / new_height) * image.size[1])
        pixel_index = (pixel_y * image.size[0]) + pixel_x
        r, g, b = pixel_data[pixel_index]

        # Duplicate the base cube
        cube = base_cube.copy()
        cube.location = (x * cube_size, y * cube_size, 0)
        bpy.context.collection.objects.link(cube)
        
        # Set the cube's object colour
        cube.color = (r, g, b, 1)

# Delete the original base cube
bpy.data.objects.remove(base_cube)

print("Finished creating cubes from image.")
